commands od linux 
ls -a	list all files including hidden file starting with '.'
ls --color	colored list [=always/never/auto]
ls -d	list directories - with ' */'
ls -F	add one char of */=>@| to enteries
ls -i	list file's inode index number
ls -l	list with long format - show permissions
ls -la	list long format including hidden files
ls -lh	list long format with readable file size
ls -ls	list with long format with file size
ls -r	list in reverse order
ls -R	list recursively directory tree
ls -s	list file size
ls -S	sort by file size
ls -t	sort by time & date
ls -X	sort by extension name
cd by itself or cd ~ will always put the user in their home directory.
cd . will leave the user in the same directory they are currently in (i.e. the current directory won't change). This can be useful if the user's shell's internal code can't deal with the directory they are in being recreated; running cd . will place their shell in the recreated directory.
cd ~username will put the user in the username's home directory.
cd dir (without a /) will put the user in a subdirectory; for example, if they are in /usr, typing cd bin will put them in /usr/bin, while cd /bin puts them in /bin.
cd .. will move the user up one directory. So, if they are /usr/bin/tmp, cd .. moves them to /usr/bin, while cd ../.. moves them to /usr (i.e. up two levels). The user can use this indirection to access subdirectories too. So, from /usr/bin/tmp, they can use cd ../../local to go to /usr/local.
cd - will switch the user to the previous directory. For example, if they are in /usr/bin/tmp, and go to /etc, they can type cd - to go back to /usr/bin/tmp. The user can use this to toggle back and forth between two directories.
option	description
cp -a	archive files
cp -f	force copy by removing the destination file if needed
cp -i	interactive - ask before overwrite
cp -l	link files instead of copy
mv -f	force move by overwriting destination file without prompt
mv -i	interactive prompt before overwrite
mv -u	update - move when source is newer than destination
mv -v	verbose - print source and destination files
rm -i will ask before deleting each file. ...
rm -r will recursively delete a directory and all its contents (normally rm will not delete directories, while rmdir will only delete empty directories).
touch filename -creates a file
chmod g=r filename
Copy
Remove the execute permission for all users:

chmod a-x filename
Copy
Recursively remove the write permission for other users:

chmod -R o-w dirname
Copy
Remove the read, write, and execute permission for all users except the file’s owner:

chmod og-rwx filename
Copy
The same thing can be also accomplished by using the following form:

chmod og= filename
Copy
Give read, write and execute permission to the file’s owner, read permissions to the file’s group and no permissions to all other users:

chmod u=rwx,g=r,o= filename
Copy
Add the file’s owner permissions to the permissions that the members of the file’s group have:

chmod g+u filename
cat >file name - creates a new file
cat filename - displayes file content
